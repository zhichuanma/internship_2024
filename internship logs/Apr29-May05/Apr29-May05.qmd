---
title: "Internship logs from Apr.29 to May.05"
author:   
  - Zhichuan MA 
format: 
 pdf:
    toc: true
    number-sections: true
    colorlinks: true
citation-package: biblatex
---
Last week I have done the reading for the official website, learned the constraints used in the REHO optimization model. This week's focus will be laid on the scripts. The expected output of this week will be the \textbf{\textcolor{red}{introduction of LCA method they utilised and critisize}} and \textbf{\textcolor{blue}{the beginning of using current REHO to do a case study}}. 

I also decide to read the codes again (though I have done the reading last week) more in detail.

# Apr.29

Today's key point is to read through the Package structure combined with the codes.

## /data

### elcom

This is a dataset composed of **the city id, commune, id_operator and operator**. But I haven't seen its use in the model since there is no numerical value related to calculation.

In my case study, **maybe** I need to build a database like this by myself, or not.

### emissions

According to the name "electricity_matrix_2019_reduced.csv", this is some environmental impacts of the electricity, but the numbers in the columns remain unknown.

More importantly, I didn't find corresponding value in ecoinvent.

### infrastructure

These are datasets for different units used in building or districts. It involves in 13 kinds of environmental impacts. The storage units are lack of a lot of datas relevant to the environmental impacts.

### QBuilding

They are online databases and we are not be able to access.

### SIA

 - sia2024_data.xlsx: Properties for different rooms.
 - sia2024_rooms_sia380_1.csv: Room compositions for different types of building.

### skydome

**skypatch** means the sky area we observe.

Irradiation gives one year's irradiation data for 2005.

### weather

1 year's data for 6 different cities in Switzerland.

## model

The main purpose to read the scripts are:

 - 1. Know the inputs of REHO for my further implement.
 - 2. Discover the objective function.
 - 3. Find the method they used for LCA.

### ampl_model

Based on the DW decomposition the model structure is like master problem + subproblems

EMOO means evolutionary multi objective optimization.

![ample_model](ampl_model.png)

### postprocessing

### preprocessing

## scripts

Here I will implement the file "3a_Read_csv" in different scenarios.

### Building-scale

#### Single optimization
```{matlab}
from reho.model.reho import *

if __name__ == '__main__':

    # Set building parameters
    # you can as well define your district from a csv file instead of reading the database
    reader = QBuildingsReader()
    qbuildings_data = reader.read_csv(buildings_filename='../template/data/buildings.csv', nb_buildings=2)

    # Select weather data
    cluster = {'Location': 'Geneva', 'Attributes': ['I', 'T', 'W'], 'Periods': 10, 'PeriodDuration': 24}

    # Set scenario
    scenario = dict()
    scenario['Objective'] = 'TOTEX'
    scenario['name'] = 'totex'
    scenario['exclude_units'] = ['NG_Cogeneration', 'OIL_Boiler', 'ThermalSolar']
    scenario['enforce_units'] = []


    # Initialize available units and grids
    grids = infrastructure.initialize_grids()
    units = infrastructure.initialize_units(scenario, grids)

    # Set method options
    method = {'building-scale': True}

    # Run optimization
    reho = reho(qbuildings_data=qbuildings_data, units=units, grids=grids, cluster=cluster, scenario=scenario, method=method)
    reho.single_optimization()

    # Save results
    reho.save_results(format=['xlsx', 'pickle'], filename='3a')

    # Plot results
    plotting.plot_performance(reho.results, plot='costs').show()
    plotting.plot_sankey(reho.results["totex"][0]).show()
```

![Building-scale single optimization](building_single.png)

![Building-scale single optimization Cost](building_single_cost.png)

![Building-scale single optimization GWP](building_single_gwp.png)

![Building-scale single optimization sankey](building_single_sankey.png)

#### Pareto curve

```{matlab}
from reho.model.reho import *
from reho.plotting import plotting

if __name__ == '__main__':

    # Set building parameters
    # you can as well define your district from a csv file instead of reading the database
    reader = QBuildingsReader()
    qbuildings_data = reader.read_csv(buildings_filename='../template/data/buildings.csv', nb_buildings=2)

    # Select weather data
    cluster = {'Location': 'Geneva', 'Attributes': ['I', 'T', 'W'], 'Periods': 10, 'PeriodDuration': 24}

    # Set scenario
    scenario = dict()
    scenario['Objective'] = ['CAPEX', 'OPEX']
    scenario['nPareto'] = 2
    scenario['name'] = 'pareto'
    scenario['exclude_units'] = ['NG_Cogeneration', 'OIL_Boiler', 'ThermalSolar']
    scenario['enforce_units'] = []


    # Initialize available units and grids
    grids = infrastructure.initialize_grids()
    units = infrastructure.initialize_units(scenario, grids)

    # Set method options
    method = {'building-scale': True}

    # Run optimization
    reho = reho(qbuildings_data=qbuildings_data, units=units, grids=grids, cluster=cluster, scenario=scenario, method=method, solver='gurobi')
    reho.generate_pareto_curve()

    # Save results
    reho.save_results(format=['xlsx', 'pickle'], filename='3a')

    # Performance plot : costs and gwp
    plotting.plot_performance(reho.results, plot='costs', indexed_on='Pareto_ID', label='EN_long').show()
    plotting.plot_performance(reho.results, plot='gwp', indexed_on='Pareto_ID', label='EN_long').show()

    # Sankey diagram
    for key in reho.results['pareto'].keys():
        plotting.plot_sankey(reho.results['pareto'][key], label='EN_long', color='ColorPastel').show()
```

![Pareto cost change for building scale](cost_building_pareto.png)

![Pareto GWP change for building scale](gwp_building_pareto.png)

![Pareto sankey for building scale](sankey_building_pareto.png)

### District-scale

#### Single optimization

```{matlab}
from reho.model.reho import *

if __name__ == '__main__':

    # Set building parameters
    # you can as well define your district from a csv file instead of reading the database
    reader = QBuildingsReader()
    qbuildings_data = reader.read_csv(buildings_filename='../template/data/buildings.csv', nb_buildings=2)

    # Select weather data
    cluster = {'Location': 'Geneva', 'Attributes': ['I', 'T', 'W'], 'Periods': 10, 'PeriodDuration': 24}

    # Set scenario
    scenario = dict()
    scenario['Objective'] = 'TOTEX'
    scenario['name'] = 'totex'
    scenario['exclude_units'] = ['NG_Cogeneration', 'OIL_Boiler', 'ThermalSolar']
    scenario['enforce_units'] = []


    # Initialize available units and grids
    grids = infrastructure.initialize_grids()
    units = infrastructure.initialize_units(scenario, grids)

    # Set method options
    method = {'district-scale': True}

    # Run optimization
    reho = reho(qbuildings_data=qbuildings_data, units=units, grids=grids, cluster=cluster, scenario=scenario, method=method)
    reho.single_optimization()

    # Save results
    reho.save_results(format=['xlsx', 'pickle'], filename='3a')

```

![District-scale single optimization](district_single.png)

![Building-scale single optimization Cost](district_single_cost.png)

![Building-scale single optimization GWP](district_single_gwp.png)

![Building-scale single optimization sankey](district_single_sankey.png)

Here I didn't add the limit for the iterations of DW decompositions since the number of buildings are only 2.

#### Pareto curve

```{matlab}
from reho.model.reho import *
from reho.plotting import plotting

if __name__ == '__main__':

    # Set building parameters
    # you can as well define your district from a csv file instead of reading the database
    reader = QBuildingsReader()
    qbuildings_data = reader.read_csv(buildings_filename='../template/data/buildings.csv', nb_buildings=2)

    # Select weather data
    cluster = {'Location': 'Geneva', 'Attributes': ['I', 'T', 'W'], 'Periods': 10, 'PeriodDuration': 24}

    # Set scenario
    scenario = dict()
    scenario['Objective'] = ['CAPEX', 'OPEX']
    scenario['nPareto'] = 2
    scenario['name'] = 'pareto'
    scenario['exclude_units'] = ['NG_Cogeneration', 'OIL_Boiler', 'ThermalSolar']
    scenario['enforce_units'] = []


    # Initialize available units and grids
    grids = infrastructure.initialize_grids()
    units = infrastructure.initialize_units(scenario, grids)

    # Set method options
    method = {'district-scale': True}
    DW_params = {'max_iter': 2}


    # Run optimization
    reho = reho(qbuildings_data=qbuildings_data, units=units, grids=grids, cluster=cluster, scenario=scenario, method=method, solver='gurobi')
    reho.generate_pareto_curve()

    # Save results
    reho.save_results(format=['xlsx', 'pickle'], filename='3a')

    # Performance plot : costs and gwp
    plotting.plot_performance(reho.results, plot='costs', indexed_on='Pareto_ID', label='EN_long').show()
    plotting.plot_performance(reho.results, plot='gwp', indexed_on='Pareto_ID', label='EN_long').show()

    # Sankey diagram
    for key in reho.results['pareto'].keys():
        plotting.plot_sankey(reho.results['pareto'][key], label='EN_long', color='ColorPastel').show()
```

![Pareto cost change for district scale](cost_district_pareto.png)

![Pareto GWP change for district scale](gwp_district_pareto.png)

![Pareto sankey for district scale](sankey_district_pareto.png)

### Various features

#### stochastic profiles for EUD

```{matlab}
# add stochasticity in the demand profiles given by the SIA standards, tunable with:
    # - standard deviation on the peak demand
    # - standard deviation on the time-shift
    method = {'building-scale': True, 'include_stochasticity': True, 'sd_stochasticity': [0.1, 2]}
```

#### fix unit size

```{matlab}
# Run new optimization with the capacity of PV and electrical heater fixed with the size of the first optimization
    reho.df_fix_Units = reho.results['totex'][0]["df_Unit"]  # load data on the capacity of units
    reho.fix_units_list = ['PV', 'ElectricalHeater_DHW', 'ElectricalHeater_SH']  # select the ones being fixed
    reho.scenario['Objective'] = 'CAPEX'
    reho.scenario['name'] = 'fixed'
    reho.method['fix_units'] = True  # select the method fixing the unit sizes
    reho.single_optimization()
```

#### change heat pump temperature

```{matlab}
    # Set specific parameters
    parameters = {"T_source": np.repeat({"Geothermal": 17.0}, 2)}

    # Run optimization
    reho = reho(qbuildings_data=qbuildings_data, units=units, grids=grids, parameters=parameters, cluster=cluster, scenario=scenario, method=method, solver="gurobi")
```

#### Add other energy layers

```{matlab}
    # Initialize available units and grids
    # You can add more resources layers besides electricity and natural gas, and adapt their prices
    # or keep the default values from data/parameters/grids.csv
    grids = infrastructure.initialize_grids({'Electricity': {"Cost_supply_cst": 0.30, "Cost_demand_cst": 0.16},
                                             'NaturalGas': {"Cost_supply_cst": 0.15},
                                             'Wood': {},
                                             'Oil': {},
                                             })
    path_to_custom_units = '../../reho/data/infrastructure/building_units.csv'
    units = infrastructure.initialize_units(scenario, grids, building_data=path_to_custom_units)
```

#### Include electrical vehicles

```{matlab}
    # Set scenario
    scenario = dict()
    scenario['Objective'] = 'TOTEX'
    scenario['name'] = 'totex'
    scenario['exclude_units'] = ['Battery', 'NG_Cogeneration']
    scenario['enforce_units'] = ['EV_district']

    # Initialize available units and grids
    grids = infrastructure.initialize_grids()
    units = infrastructure.initialize_units(scenario, grids, district_data=True)

    # Set method options
    method = {'building-scale': True}

    # Set specific parameters
    parameters = {'n_vehicles': 6}
```

For other scenarios, directly go the website: https://reho.readthedocs.io/en/main/sections/6_Examples.html.

## Conclusion

1. About how to use REHO
In order to use REHO, what I need to do is to
 - input relevant building characteristics, weather conditions; 
 - know about the scenario;
 - adjust corresponding parameters and conditions.

2. The difference between Pareto and single optimization is the objectives. (2 or 1)

3. Difference between building levels and district levels:
 - building-level: Optimizes by considering than each building is an independent system
 - district-level: Optimizes by allowing exchanges between buildings and the use of district units 

## Questions

 1. Can I choose other objectives except for "TOTEX", "CAPEX" and "OPEX"?

 - YES, like "GWP"

 2. Can I have more than 3 objectives?

 - YES, here is an example.

```{matlab}
    # Set scenario
    scenario = dict()
    scenario['Objective'] = ['GWP', 'OPEX', 'CAPEX']
    scenario['name'] = 'pareto'
    scenario['nPareto'] = 3
    scenario['exclude_units'] = ['NG_Cogeneration', 'OIL_Boiler', 'ThermalSolar']
    scenario['enforce_units'] = []
```

![example, ['GWP', 'OPEX', 'CAPEX'] cost](district_3pareto_cost.png)

![example, ['GWP', 'OPEX', 'CAPEX'] GWP](district_3pareto_gwp.png)

![example, ['GWP', 'OPEX', 'CAPEX'] Sankey](district_3pareto_sankey.png)

 3. What's the relationship between the paramters we input for objectives? (eg. What's the difference between scenario['Objective'] = ['GWP', 'OPEX', 'CAPEX'] & scenario['Objective'] = ['OPEX', 'CAPEX', 'GWP']?)

### ['OPEX', 'CAPEX', 'GWP']

![example, ['OPEX', 'CAPEX', 'GWP'] cost](district_3pareto_cost_ocg.png)

![example, ['OPEX', 'CAPEX', 'GWP'] GWP](district_3pareto_gwp_ocg.png)

![example, ['OPEX', 'CAPEX', 'GWP'] Sankey](district_3pareto_sankey_ocg.png)

## What should I do tomorrow?

 1. try to create a building csv file which could be treated as an input
 2. think of different scenarios and implement REHO.
